// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supplement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "supplement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CMsgSOIDOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOIDOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgSOCacheHaveVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMsgClientHello_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMsgClientHello_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_supplement_2eproto() {
  protobuf_AddDesc_supplement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supplement.proto");
  GOOGLE_CHECK(file != NULL);
  CMsgSOIDOwner_descriptor_ = file->message_type(0);
  static const int CMsgSOIDOwner_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, id_),
  };
  CMsgSOIDOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOIDOwner_descriptor_,
      CMsgSOIDOwner::default_instance_,
      CMsgSOIDOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOIDOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOIDOwner));
  CMsgSOCacheHaveVersion_descriptor_ = file->message_type(1);
  static const int CMsgSOCacheHaveVersion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, soid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, version_),
  };
  CMsgSOCacheHaveVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgSOCacheHaveVersion_descriptor_,
      CMsgSOCacheHaveVersion::default_instance_,
      CMsgSOCacheHaveVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSOCacheHaveVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgSOCacheHaveVersion));
  CMsgClientHello_descriptor_ = file->message_type(2);
  static const int CMsgClientHello_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, socache_have_versions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_session_need_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, client_launcher_),
  };
  CMsgClientHello_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMsgClientHello_descriptor_,
      CMsgClientHello::default_instance_,
      CMsgClientHello_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientHello, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMsgClientHello));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supplement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOIDOwner_descriptor_, &CMsgSOIDOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgSOCacheHaveVersion_descriptor_, &CMsgSOCacheHaveVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMsgClientHello_descriptor_, &CMsgClientHello::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_supplement_2eproto() {
  delete CMsgSOIDOwner::default_instance_;
  delete CMsgSOIDOwner_reflection_;
  delete CMsgSOCacheHaveVersion::default_instance_;
  delete CMsgSOCacheHaveVersion_reflection_;
  delete CMsgClientHello::default_instance_;
  delete CMsgClientHello_reflection_;
}

void protobuf_AddDesc_supplement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020supplement.proto\")\n\rCMsgSOIDOwner\022\014\n\004t"
    "ype\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\"G\n\026CMsgSOCacheHave"
    "Version\022\034\n\004soid\030\001 \001(\0132\016.CMsgSOIDOwner\022\017\n"
    "\007version\030\002 \001(\006\"\220\001\n\017CMsgClientHello\022\017\n\007ve"
    "rsion\030\001 \001(\r\0226\n\025socache_have_versions\030\002 \003"
    "(\0132\027.CMsgSOCacheHaveVersion\022\033\n\023client_se"
    "ssion_need\030\003 \001(\r\022\027\n\017client_launcher\030\004 \001("
    "\rB\005H\001\220\001\000", 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supplement.proto", &protobuf_RegisterTypes);
  CMsgSOIDOwner::default_instance_ = new CMsgSOIDOwner();
  CMsgSOCacheHaveVersion::default_instance_ = new CMsgSOCacheHaveVersion();
  CMsgClientHello::default_instance_ = new CMsgClientHello();
  CMsgSOIDOwner::default_instance_->InitAsDefaultInstance();
  CMsgSOCacheHaveVersion::default_instance_->InitAsDefaultInstance();
  CMsgClientHello::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supplement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supplement_2eproto {
  StaticDescriptorInitializer_supplement_2eproto() {
    protobuf_AddDesc_supplement_2eproto();
  }
} static_descriptor_initializer_supplement_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CMsgSOIDOwner::kTypeFieldNumber;
const int CMsgSOIDOwner::kIdFieldNumber;
#endif  // !_MSC_VER

CMsgSOIDOwner::CMsgSOIDOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOIDOwner::InitAsDefaultInstance() {
}

CMsgSOIDOwner::CMsgSOIDOwner(const CMsgSOIDOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOIDOwner::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOIDOwner::~CMsgSOIDOwner() {
  SharedDtor();
}

void CMsgSOIDOwner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgSOIDOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOIDOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOIDOwner_descriptor_;
}

const CMsgSOIDOwner& CMsgSOIDOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CMsgSOIDOwner* CMsgSOIDOwner::default_instance_ = NULL;

CMsgSOIDOwner* CMsgSOIDOwner::New() const {
  return new CMsgSOIDOwner;
}

void CMsgSOIDOwner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOIDOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOIDOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOIDOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOIDOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOIDOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOIDOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOIDOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOIDOwner::MergeFrom(const CMsgSOIDOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOIDOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOIDOwner::CopyFrom(const CMsgSOIDOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOIDOwner::IsInitialized() const {

  return true;
}

void CMsgSOIDOwner::Swap(CMsgSOIDOwner* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOIDOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOIDOwner_descriptor_;
  metadata.reflection = CMsgSOIDOwner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgSOCacheHaveVersion::kSoidFieldNumber;
const int CMsgSOCacheHaveVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgSOCacheHaveVersion::InitAsDefaultInstance() {
  soid_ = const_cast< ::CMsgSOIDOwner*>(&::CMsgSOIDOwner::default_instance());
}

CMsgSOCacheHaveVersion::CMsgSOCacheHaveVersion(const CMsgSOCacheHaveVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::SharedCtor() {
  _cached_size_ = 0;
  soid_ = NULL;
  version_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgSOCacheHaveVersion::~CMsgSOCacheHaveVersion() {
  SharedDtor();
}

void CMsgSOCacheHaveVersion::SharedDtor() {
  if (this != default_instance_) {
    delete soid_;
  }
}

void CMsgSOCacheHaveVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSOCacheHaveVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgSOCacheHaveVersion_descriptor_;
}

const CMsgSOCacheHaveVersion& CMsgSOCacheHaveVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::default_instance_ = NULL;

CMsgSOCacheHaveVersion* CMsgSOCacheHaveVersion::New() const {
  return new CMsgSOCacheHaveVersion;
}

void CMsgSOCacheHaveVersion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_soid()) {
      if (soid_ != NULL) soid_->::CMsgSOIDOwner::Clear();
    }
    version_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgSOCacheHaveVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSOIDOwner soid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_version;
        break;
      }

      // optional fixed64 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgSOCacheHaveVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soid(), output);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgSOCacheHaveVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgSOIDOwner soid = 1;
  if (has_soid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->soid(), target);
  }

  // optional fixed64 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgSOCacheHaveVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgSOIDOwner soid = 1;
    if (has_soid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soid());
    }

    // optional fixed64 version = 2;
    if (has_version()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSOCacheHaveVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgSOCacheHaveVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgSOCacheHaveVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgSOCacheHaveVersion::MergeFrom(const CMsgSOCacheHaveVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soid()) {
      mutable_soid()->::CMsgSOIDOwner::MergeFrom(from.soid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgSOCacheHaveVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSOCacheHaveVersion::CopyFrom(const CMsgSOCacheHaveVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSOCacheHaveVersion::IsInitialized() const {

  return true;
}

void CMsgSOCacheHaveVersion::Swap(CMsgSOCacheHaveVersion* other) {
  if (other != this) {
    std::swap(soid_, other->soid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgSOCacheHaveVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgSOCacheHaveVersion_descriptor_;
  metadata.reflection = CMsgSOCacheHaveVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMsgClientHello::kVersionFieldNumber;
const int CMsgClientHello::kSocacheHaveVersionsFieldNumber;
const int CMsgClientHello::kClientSessionNeedFieldNumber;
const int CMsgClientHello::kClientLauncherFieldNumber;
#endif  // !_MSC_VER

CMsgClientHello::CMsgClientHello()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMsgClientHello::InitAsDefaultInstance() {
}

CMsgClientHello::CMsgClientHello(const CMsgClientHello& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMsgClientHello::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  client_session_need_ = 0u;
  client_launcher_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMsgClientHello::~CMsgClientHello() {
  SharedDtor();
}

void CMsgClientHello::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMsgClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientHello::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMsgClientHello_descriptor_;
}

const CMsgClientHello& CMsgClientHello::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

CMsgClientHello* CMsgClientHello::default_instance_ = NULL;

CMsgClientHello* CMsgClientHello::New() const {
  return new CMsgClientHello;
}

void CMsgClientHello::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0u;
    client_session_need_ = 0u;
    client_launcher_ = 0u;
  }
  socache_have_versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMsgClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        break;
      }

      // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socache_have_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_socache_have_versions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_socache_have_versions;
        if (input->ExpectTag(24)) goto parse_client_session_need;
        break;
      }

      // optional uint32 client_session_need = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_session_need:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_session_need_)));
          set_has_client_session_need();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_client_launcher;
        break;
      }

      // optional uint32 client_launcher = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_launcher:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_launcher_)));
          set_has_client_launcher();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMsgClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->socache_have_versions(i), output);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_session_need(), output);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_launcher(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMsgClientHello::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->socache_have_versions(i), target);
  }

  // optional uint32 client_session_need = 3;
  if (has_client_session_need()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_session_need(), target);
  }

  // optional uint32 client_launcher = 4;
  if (has_client_launcher()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_launcher(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMsgClientHello::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 client_session_need = 3;
    if (has_client_session_need()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_session_need());
    }

    // optional uint32 client_launcher = 4;
    if (has_client_launcher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_launcher());
    }

  }
  // repeated .CMsgSOCacheHaveVersion socache_have_versions = 2;
  total_size += 1 * this->socache_have_versions_size();
  for (int i = 0; i < this->socache_have_versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->socache_have_versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientHello::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMsgClientHello* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMsgClientHello*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMsgClientHello::MergeFrom(const CMsgClientHello& from) {
  GOOGLE_CHECK_NE(&from, this);
  socache_have_versions_.MergeFrom(from.socache_have_versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_client_session_need()) {
      set_client_session_need(from.client_session_need());
    }
    if (from.has_client_launcher()) {
      set_client_launcher(from.client_launcher());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMsgClientHello::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientHello::CopyFrom(const CMsgClientHello& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientHello::IsInitialized() const {

  return true;
}

void CMsgClientHello::Swap(CMsgClientHello* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    socache_have_versions_.Swap(&other->socache_have_versions_);
    std::swap(client_session_need_, other->client_session_need_);
    std::swap(client_launcher_, other->client_launcher_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMsgClientHello::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMsgClientHello_descriptor_;
  metadata.reflection = CMsgClientHello_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
